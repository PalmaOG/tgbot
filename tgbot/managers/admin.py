from telebot import types
from managers.database import DatabaseManager
from managers.keyboard import KeyboardManager

class AdminManager:
    @staticmethod
    def show_pending_profiles(bot, user_id, page=0, city_id=None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –∫–∞–∫ inline-–∫–Ω–æ–ø–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if not DatabaseManager.is_admin(user_id):
            return bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        pending_profiles = DatabaseManager.get_pending_profiles(page, city_id=city_id)
        if not pending_profiles:
            return bot.send_message(user_id, "‚úÖ –ù–µ—Ç –∞–Ω–∫–µ—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")

        markup = types.InlineKeyboardMarkup()
        for profile in pending_profiles:
            full_profile = DatabaseManager.get_barber_full_data_by_user_id(profile[1])
            metro_text = f" ({full_profile['metro_name']})" if full_profile and full_profile.get('metro_name') else ""

            btn_text = f"{profile[9]}{metro_text} ({profile[3]})"
            markup.add(types.InlineKeyboardButton(
                btn_text,
                callback_data=f"admin_view_profile_{profile[0]}"
            ))

        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"admin_pending_prev_{page-1}_{city_id if city_id else ''}"
            ))
        if len(pending_profiles) == 10:
            nav_buttons.append(types.InlineKeyboardButton(
                "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=f"admin_pending_next_{page+1}_{city_id if city_id else ''}"
            ))

        if nav_buttons:
            markup.row(*nav_buttons)

        if city_id:
            city_name = DatabaseManager.get_city_name_by_id(city_id)
            markup.add(types.InlineKeyboardButton(
                "üîô –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",
                callback_data="admin_reset_filter"
            ))
            title = f"–ê–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ –≥–æ—Ä–æ–¥–µ {city_name} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}):"
        else:
            markup.add(types.InlineKeyboardButton(
                "üîç –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É",
                callback_data="admin_filter_by_city"
            ))
            title = f"–ê–Ω–∫–µ—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}):"

        bot.send_message(user_id, title, reply_markup=markup)

    @staticmethod
    def ask_for_city_filter(bot, user_id):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥–æ—Ä–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        msg = bot.send_message(
            user_id,
            "üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç:",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, lambda m: AdminManager.handle_city_filter(bot, m))

    @staticmethod
    def handle_city_filter(bot, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        user_id = message.from_user.id
        city_name = message.text.strip()

        if not city_name:
            msg = bot.send_message(
                user_id,
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=types.ForceReply()
            )
            bot.register_next_step_handler(msg, lambda m: AdminManager.handle_city_filter(bot, m))
            return

        city_id = DatabaseManager.get_city_id_by_name(city_name)
        if not city_id:
            bot.send_message(
                user_id,
                f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=KeyboardManager.admin_main_keyboard()
            )
            return

        AdminManager.show_pending_profiles(bot, user_id, city_id=city_id)

    @staticmethod
    def show_profile_details(bot, user_id, barber_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        profile = DatabaseManager.get_barber_by_id(barber_id)
        if not profile:
            return bot.send_message(user_id, "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        full_profile = DatabaseManager.get_barber_full_data_by_user_id(profile['user_id'])
        metro_text = f"\nüöá –ú–µ—Ç—Ä–æ: {full_profile['metro_name']}" if full_profile and full_profile.get('metro_name') else ""

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—ã—Ç–∞
        experience = profile['experience_years']
        if experience == 1:
            experience_text = "1 –≥–æ–¥"
        elif 2 <= experience <= 4:
            experience_text = f"{experience} –≥–æ–¥–∞"
        else:
            experience_text = f"{experience} –ª–µ—Ç"

        services = DatabaseManager.get_barber_services(barber_id)
        services_text = ""
        if services:
            services_text = "\nüí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:\n"
            for service in services:
                if isinstance(service, (list, tuple)) and len(service) >= 2:
                    services_text += f"‚Ä¢ {service[0]}: {int(service[1])} —Ä—É–±.\n"

        text = (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üÜî ID: {profile['id']}\n"
            f"üë§ –ë–∞—Ä–±–µ—Ä: {profile['first_name']}\n"
            f"üìç –ì–æ—Ä–æ–¥: {profile['city_name']}{metro_text}\n"
            f"üíà –û–ø—ã—Ç: {experience_text}\n"
            f"üì∏ –§–æ—Ç–æ —Ä–∞–±–æ—Ç: {profile['photos_count']}\n"
            f"{services_text}"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            f"  ‚Ä¢ Instagram: {profile['instagram'] or '–Ω–µ—Ç'}\n"
            f"  ‚Ä¢ WhatsApp: {profile['whatsapp'] or '–Ω–µ—Ç'}\n"
            f"  ‚Ä¢ Telegram: {profile['telegram'] or '–Ω–µ—Ç'}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_{barber_id}"),
            types.InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"admin_ban_{barber_id}")
        )
        markup.add(types.InlineKeyboardButton(
            "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            callback_data=f"admin_comment_{barber_id}"
        ))
        markup.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="admin_back_to_list"
        ))

        photos = DatabaseManager.get_barber_photos(barber_id)
        if photos:
            try:
                media = [types.InputMediaPhoto(photos[0][0], caption=text)]
                for photo in photos[1:]:
                    media.append(types.InputMediaPhoto(photo[0]))
                bot.send_media_group(user_id, media)
                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                bot.send_message(user_id, text, reply_markup=markup)
        else:
            bot.send_message(user_id, text, reply_markup=markup)
    @staticmethod
    def handle_comment_input(bot, message, barber_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = message.from_user.id
        comment = message.text

        if not comment or len(comment.strip()) < 5:
            msg = bot.send_message(
                user_id,
                "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=types.ForceReply()
            )
            bot.register_next_step_handler(
                msg,
                lambda m: AdminManager.handle_comment_input(bot, m, barber_id)
            )
            return

        barber_user_id = DatabaseManager.get_barber_user_id(barber_id)
        if barber_user_id:
            bot.send_message(
                barber_user_id,
                f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–µ:\n\n{comment}"
            )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(types.KeyboardButton("üìù –ñ–¥—É—â–∏–µ –∞–Ω–∫–µ—Ç—ã"))  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ –≤—Å—é —Å—Ç—Ä–æ–∫—É
        markup.row(  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
            types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å")

    )

        bot.send_message(
            user_id,
            f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∞—Ä–±–µ—Ä—É\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∫–µ—Ç—ã —Å–Ω–æ–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        AdminManager.show_profile_details(bot, user_id, barber_id)
    @staticmethod
    def handle_callback(bot, call):
        user_id = call.from_user.id
        data = call.data

        try:
            if data.startswith("admin_pending_prev_") or data.startswith("admin_pending_next_"):
                parts = data.split('_')
                page = int(parts[3])
                city_id = int(parts[4]) if len(parts) > 4 and parts[4] else None
                AdminManager.show_pending_profiles(bot, user_id, page, city_id)

            elif data.startswith("admin_view_profile_"):
                barber_id = int(data.split("_")[3])
                AdminManager.show_profile_details(bot, user_id, barber_id)

            elif data == "admin_back_to_list":
                AdminManager.show_pending_profiles(bot, user_id)

            elif data.startswith("admin_approve_"):
                barber_id = int(data.split("_")[2])
                DatabaseManager.update_barber_status(barber_id, "active")
                barber_user_id = DatabaseManager.get_barber_user_id(barber_id)
                bot.send_message(barber_user_id, "üéâ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –≤–∏–¥–∏–º—ã –≤ –ø–æ–∏—Å–∫–µ. –í–µ–¥–∏—Ç–µ /start")
                bot.answer_callback_query(call.id, "‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
                AdminManager.show_pending_profiles(bot, user_id)

            elif data.startswith("admin_ban_"):
                barber_id = int(data.split("_")[2])
                DatabaseManager.update_barber_status(barber_id, "banned")
                barber_user_id = DatabaseManager.get_barber_user_id(barber_id)
                bot.send_message(barber_user_id, "‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
                bot.answer_callback_query(call.id, "üö´ –ê–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
                AdminManager.show_pending_profiles(bot, user_id)

            elif data.startswith("admin_comment_"):
                barber_id = int(data.split("_")[2])
                msg = bot.send_message(
                    user_id,
                    "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –±–∞—Ä–±–µ—Ä–∞:",
                    reply_markup=types.ForceReply()
                )
                bot.register_next_step_handler(
                    msg,
                    lambda m: AdminManager.handle_comment_input(bot, m, barber_id)
                )
                bot.answer_callback_query(call.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

            elif data == "admin_filter_by_city":
                AdminManager.ask_for_city_filter(bot, user_id)
                bot.answer_callback_query(call.id)

            elif data == "admin_reset_filter":
                AdminManager.show_pending_profiles(bot, user_id)
                bot.answer_callback_query(call.id)

            bot.answer_callback_query(call.id)
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            bot.answer_callback_query(call.id)