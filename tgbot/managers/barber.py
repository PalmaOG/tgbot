import logging
from telebot import types
from telebot.types import ReplyKeyboardRemove, InputMediaPhoto
from config.constants import QUESTIONS, SERVICES
from managers.keyboard import KeyboardManager
from core.storage import BarberStorage
from managers.database import DatabaseManager

logger = logging.getLogger(__name__)
storage = BarberStorage()

QUESTION_ORDER = [
    'description',
    'work_photos',
    'city',
    'metro',
    'experience',
    'specialization',
    'services',
    'instagram',
    'whatsapp',
    'telegram'
]

def russian_years(n):
    n = abs(int(n))
    if n % 10 == 1 and n % 100 != 11:
        return f"{n} –≥–æ–¥"
    elif 2 <= n % 10 <= 4 and not (12 <= n % 100 <= 14):
        return f"{n} –≥–æ–¥–∞"
    else:
        return f"{n} –ª–µ—Ç"

class BarberManager:
    @staticmethod
    def show_my_profile(user_id: int, bot):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É –±–∞—Ä–±–µ—Ä–∞ —Å –º–µ—Ç—Ä–æ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
        barber_data = DatabaseManager.get_barber_by_user_id(user_id)
        if not barber_data or len(barber_data) == 0:
            bot.send_message(user_id, "‚ùå –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∞–Ω–∫–µ—Ç—É –±–∞—Ä–±–µ—Ä–∞.")
            return

        barber_id = barber_data[0]
        profile = DatabaseManager.get_barber_full_data_by_user_id(user_id)
        if not profile:
            bot.send_message(user_id, "‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        avg_rating, rating_count = DatabaseManager.get_barber_average_rating(barber_id)
        rating_text = f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5 ({rating_count})\n" if avg_rating is not None else "‚≠ê –†–µ–π—Ç–∏–Ω–≥: –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫\n"
        metro_text = f"\nüöá –ú–µ—Ç—Ä–æ: {profile['metro_name']}" if profile.get('metro_name') else ""

        services = DatabaseManager.get_barber_services(barber_id)
        services_text = "\nüí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:\n" if services else "\nüí∞ –£—Å–ª—É–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"
        for service in services:
            if isinstance(service, (list, tuple)) and len(service) >= 2:
                services_text += f"‚Ä¢ {service[0]}: {float(service[1]):.0f} —Ä—É–±.\n"

        experience_text = russian_years(profile['experience_years']) if profile.get('experience_years') else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        text = (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üë§ –ë–∞—Ä–±–µ—Ä: {profile['first_name']}\n"
           
            f"üìç –ì–æ—Ä–æ–¥: {profile['city_name']}{metro_text}\n"
            f"üíà –û–ø—ã—Ç: {experience_text}\n"
            f"üì∏ –§–æ—Ç–æ —Ä–∞–±–æ—Ç: {profile['photos_count']}\n"
            f"{services_text}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            f"  ‚Ä¢ Instagram: {profile['instagram'] or '–Ω–µ—Ç'}\n"
            f"  ‚Ä¢ WhatsApp: {profile['whatsapp'] or '–Ω–µ—Ç'}\n"
            f"  ‚Ä¢ Telegram: {profile['telegram'] or '–Ω–µ—Ç'}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )

        photos = DatabaseManager.get_barber_photos(barber_id)
        if photos:
            try:
                media = [InputMediaPhoto(photo[0] if isinstance(photo, (list, tuple)) else photo) for photo in photos]
                media[0].caption = text
                bot.send_media_group(user_id, media)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                bot.send_message(user_id, text)
        else:
            bot.send_message(user_id, text)

    @staticmethod
    def ask_question(user_id: int, question_key: str, bot):
        profile = storage.get_profile(user_id) or {}

        if question_key == 'work_photos':
            msg = bot.send_message(
                user_id,
                QUESTIONS['work_photos'],
                reply_markup=ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, BarberManager.handle_work_photo, bot, 0)
            return

        question = QUESTIONS[question_key]

        if question_key == 'specialization':
            selected_specialization = profile.get('specialization')
            bot.send_message(
                user_id,
                question,
                reply_markup=KeyboardManager.specialization_keyboard(selected_specialization)
            )
        else:
            msg = bot.send_message(user_id, question, reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, BarberManager.handle_answer, question_key, bot)

    @staticmethod
    def handle_work_photo(message: types.Message, bot, photo_count):
        user_id = message.from_user.id
        profile = storage.get_profile(user_id) or {}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if message.text and message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel']:
            bot.send_message(user_id, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if message.content_type != 'photo':
            msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")
            bot.register_next_step_handler(msg, BarberManager.handle_work_photo, bot, photo_count)
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        if 'work_photos' not in profile:
            profile['work_photos'] = []

        if len(profile['work_photos']) >= 5:
            bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (5).")
            BarberManager.ask_question(user_id, 'city', bot)
            return

        profile['work_photos'].append(file_id)
        storage.save_profile(user_id, profile)
        photo_count = len(profile['work_photos'])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if photo_count < 5:
            remaining = 5 - photo_count
            msg = bot.send_message(
                user_id,
                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {photo_count}/5. –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {remaining}",
                reply_markup=ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, BarberManager.handle_work_photo, bot, photo_count)
        else:
            bot.send_message(
                user_id,
                "‚úÖ –í—Å–µ 5 —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.",
                reply_markup=ReplyKeyboardRemove()
            )
            BarberManager.ask_question(user_id, 'city', bot)

    @staticmethod
    def handle_answer(message: types.Message, question_key: str, bot):
        user_id = message.from_user.id
        profile = storage.get_profile(user_id) or {}

        if question_key == 'city':
            city_name = message.text.strip()
            city_id = DatabaseManager.get_city_id_by_name(city_name)
            if not city_id:
                bot.send_message(user_id, f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                msg = bot.send_message(user_id, QUESTIONS['city'], reply_markup=ReplyKeyboardRemove())
                bot.register_next_step_handler(msg, BarberManager.handle_answer, 'city', bot)
                return

            profile['city'] = city_name
            profile['city_id'] = city_id
            storage.save_profile(user_id, profile)

            if DatabaseManager.city_has_metro(city_id):
                BarberManager.ask_question(user_id, 'metro', bot)
            else:
                profile['metro'] = None
                profile['metro_id'] = None
                storage.save_profile(user_id, profile)
                metro_index = QUESTION_ORDER.index('metro')
                next_key = QUESTION_ORDER[metro_index + 1]
                BarberManager.ask_question(user_id, next_key, bot)
            return

        elif question_key == 'metro':
            city_id = profile.get('city_id')
            if not city_id:
                bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.")
                BarberManager.ask_question(user_id, 'city', bot)
                return

            metro_name = message.text.strip()
            metro_id = DatabaseManager.get_metro_id_by_name(city_id, metro_name)
            if not metro_id:
                bot.send_message(user_id, f"‚ùå –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ '{metro_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç–∞–Ω—Ü–∏—é.")
                BarberManager.ask_question(user_id, 'metro', bot)
                return

            profile['metro'] = metro_name
            profile['metro_id'] = metro_id
            storage.save_profile(user_id, profile)

            idx = QUESTION_ORDER.index('metro')
            next_key = QUESTION_ORDER[idx + 1]
            BarberManager.ask_question(user_id, next_key, bot)
            return

        elif question_key == 'experience':
            if not message.text.isdigit():
                msg = bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –æ–ø—ã—Ç–∞):")
                bot.register_next_step_handler(msg, BarberManager.handle_answer, question_key, bot)
                return

            profile['experience'] = int(message.text)
            storage.save_profile(user_id, profile)

            idx = QUESTION_ORDER.index(question_key)
            next_key = QUESTION_ORDER[idx + 1]
            BarberManager.ask_question(user_id, next_key, bot)
            return

        elif question_key == 'specialization':
            if message.text not in SERVICES.values():
                bot.send_message(
                    user_id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                    reply_markup=KeyboardManager.specialization_keyboard(profile.get('specialization'))
                )
                return

            profile['specialization'] = message.text
            profile['services'] = {}
            storage.save_profile(user_id, profile)
            BarberManager.ask_for_service_price(user_id, bot)
            return

        elif question_key in ['instagram', 'whatsapp', 'telegram']:
            profile[question_key] = message.text
            storage.save_profile(user_id, profile)

            idx = QUESTION_ORDER.index(question_key)
            if idx + 1 < len(QUESTION_ORDER):
                next_key = QUESTION_ORDER[idx + 1]
                BarberManager.ask_question(user_id, next_key, bot)
            else:
                BarberManager.finish_questionnaire(user_id, bot)
            return

        profile[question_key] = message.text
        storage.save_profile(user_id, profile)

        idx = QUESTION_ORDER.index(question_key)
        if idx + 1 < len(QUESTION_ORDER):
            next_key = QUESTION_ORDER[idx + 1]
            BarberManager.ask_question(user_id, next_key, bot)
        else:
            BarberManager.finish_questionnaire(user_id, bot)

    @staticmethod
    def ask_for_service_price(user_id: int, bot, service_name=None):
        profile = storage.get_profile(user_id)
        if not profile:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.")
            return

        if service_name is None:
            if 'specialization' not in profile:
                bot.send_message(
                    user_id,
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é!",
                    reply_markup=KeyboardManager.specialization_keyboard()
                )
                return

            selected_services = list(profile.get('services', {}).keys())
            markup = KeyboardManager.services_keyboard(selected_services)
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã:", reply_markup=markup)
            return

        if service_name:
            msg = bot.send_message(
                user_id,
                f"–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è —É—Å–ª—É–≥–∏ {service_name}:",
                reply_markup=ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, BarberManager.save_service_price, service_name, bot)

    @staticmethod
    def save_service_price(message: types.Message, service_name: str, bot):
        user_id = message.from_user.id
        try:
            price = int(message.text)
        except ValueError:
            bot.send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):",
                reply_markup=ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(message, BarberManager.save_service_price, service_name, bot)
            return

        profile = storage.get_profile(user_id)
        service_key = next(key for key, val in SERVICES.items() if val == service_name)

        if 'services' not in profile:
            profile['services'] = {}

        profile['services'][service_key] = price
        storage.save_profile(user_id, profile)

        all_services_selected = len(profile.get('services', {})) == len(SERVICES)

        if all_services_selected:
            bot.send_message(
                user_id,
                f"–¶–µ–Ω–∞ –¥–ª—è —É—Å–ª—É–≥–∏ '{service_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {price} —Ä—É–±.",
                reply_markup=ReplyKeyboardRemove()
            )
            idx = QUESTION_ORDER.index('services')
            next_key = QUESTION_ORDER[idx + 1]
            BarberManager.ask_question(user_id, next_key, bot)
        else:
            selected_services = list(profile.get('services', {}).keys())
            markup = KeyboardManager.services_keyboard(selected_services)
            bot.send_message(
                user_id,
                f"–¶–µ–Ω–∞ –¥–ª—è —É—Å–ª—É–≥–∏ '{service_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {price} —Ä—É–±.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.",
                reply_markup=markup
            )

    @staticmethod
    def finish_questionnaire(user_id: int, bot):
        BarberManager.show_profile_for_barber(user_id, bot)

    @staticmethod
    def show_profile_for_barber(user_id: int, bot):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        profile = storage.get_profile(user_id)
        if not profile:
            bot.send_message(user_id, "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        if len(profile.get('work_photos', [])) != 5:
            bot.send_message(user_id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 5 —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç!")
            BarberManager.ask_question(user_id, 'work_photos', bot)
            return

        metro_text = f"\nüöá –ú–µ—Ç—Ä–æ: {profile['metro']}" if profile.get('metro') else ""

        text = (
            f"üë§ –ë–∞—Ä–±–µ—Ä: {profile.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìç –ì–æ—Ä–æ–¥: {profile.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}{metro_text}\n"
            f"üíà –û–ø—ã—Ç: {russian_years(profile.get('experience', 0)) if profile.get('experience') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        )

        if profile.get('services'):
            text += "\nüí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:\n"
            for service_key, price in profile['services'].items():
                text += f"‚Ä¢ {SERVICES.get(service_key, service_key)}: {price} —Ä—É–±.\n"
        else:
            text += "\nüí∞ –£—Å–ª—É–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"

        text += (
            f"\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            f"‚Ä¢ Instagram: {profile.get('instagram', '–Ω–µ—Ç') or '–Ω–µ—Ç'}\n"
            f"‚Ä¢ WhatsApp: {profile.get('whatsapp', '–Ω–µ—Ç') or '–Ω–µ—Ç'}\n"
            f"‚Ä¢ Telegram: {profile.get('telegram', '–Ω–µ—Ç') or '–Ω–µ—Ç'}\n"
        )

        photos = profile.get('work_photos', [])
        markup = KeyboardManager.finish_questionnaire_keyboard()

        if photos:
            try:
                if len(photos) == 1:
                    bot.send_photo(user_id, photos[0], caption=text, reply_markup=markup)
                else:
                    media = [InputMediaPhoto(photo) for photo in photos]
                    media[0].caption = text
                    bot.send_media_group(user_id, media)
                    bot.send_message(user_id, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:", reply_markup=markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                bot.send_message(user_id, text, reply_markup=markup)
        else:
            bot.send_message(user_id, text, reply_markup=markup)

    @staticmethod
    def save_profile_to_db(user_id: int, bot):
        profile = storage.get_profile(user_id)
        if not profile:
            bot.send_message(user_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ñ–µ—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 5 —Ñ–æ—Ç–æ
        if len(profile.get('work_photos', [])) != 5:
            bot.send_message(user_id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 5 —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç!")
            BarberManager.ask_question(user_id, 'work_photos', bot)
            return

        city_name = profile.get('city', '').strip()
        city_id = DatabaseManager.get_city_id_by_name(city_name)
        if not city_id:
            bot.send_message(user_id, f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        metro_id = profile.get('metro_id')

        user_row = DatabaseManager.get_user_by_telegram_id(user_id)
        if not user_row:
            bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        existing_barber = DatabaseManager.get_barber_by_user_id(user_id)
        barber_id = None

        if existing_barber:
            barber_id = existing_barber[0]
            if not DatabaseManager.update_barber(
                    barber_id=barber_id,
                    city_id=city_id,
                    metro_id=metro_id,
                    description=profile.get('description', ''),
                    experience=profile.get('experience', 0),
                    instagram=profile.get('instagram', ''),
                    whatsapp=profile.get('whatsapp', ''),
                    telegram=profile.get('telegram', ''),
                    status='pending'
            ):
                bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.")
                return

            DatabaseManager.delete_barber_portfolio(barber_id)
            DatabaseManager.delete_barber_services(barber_id)

            photos = profile.get('work_photos', [])
            for idx, file_id in enumerate(photos[:5], 1):
                DatabaseManager.insert_barber_portfolio(barber_id, file_id, idx)

            services_data = profile.get('services', {})
            for service_key, price in services_data.items():
                category_id = DatabaseManager.get_category_id_by_type(service_key)
                if not category_id:
                    continue
                service_name = SERVICES.get(service_key, f"–£—Å–ª—É–≥–∞ {service_key}")
                DatabaseManager.insert_barber_service(
                    barber_id=barber_id,
                    category_id=category_id,
                    name=service_name,
                    price=price
                )

            storage.clear_profile(user_id)
            bot.send_message(user_id, "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

        else:
            barber_id = DatabaseManager.insert_barber(
                user_id=user_id,
                city_id=city_id,
                metro_id=metro_id,
                description=profile.get('description', ''),
                experience=profile.get('experience', 0),
                instagram=profile.get('instagram', ''),
                whatsapp=profile.get('whatsapp', ''),
                telegram=profile.get('telegram', ''),
                status='pending'
            )

            if not barber_id:
                bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤ –±–∞–∑—É.")
                return

            photos = profile.get('work_photos', [])
            for idx, file_id in enumerate(photos[:5], 1):
                DatabaseManager.insert_barber_portfolio(barber_id, file_id, idx)

            services_data = profile.get('services', {})
            for service_key, price in services_data.items():
                category_id = DatabaseManager.get_category_id_by_type(service_key)
                if not category_id:
                    continue
                service_name = SERVICES.get(service_key, f"–£—Å–ª—É–≥–∞ {service_key}")
                DatabaseManager.insert_barber_service(
                    barber_id=barber_id,
                    category_id=category_id,
                    name=service_name,
                    price=price
                )

            storage.clear_profile(user_id)
            bot.send_message(
                user_id,
                "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –≤ –±–∞–∑–µ –±–∞—Ä–±–µ—Ä–æ–≤.",
                reply_markup=types.ReplyKeyboardRemove()
            )

        roles = DatabaseManager.get_all_roles(user_id)
        active_role = DatabaseManager.get_active_role(user_id)
        is_admin = DatabaseManager.is_admin(user_id)
        is_barber_filled = DatabaseManager.barber_exists(user_id)

        markup = KeyboardManager.main_menu(active_role, len(roles), is_admin, is_barber_filled)
        bot.send_message(user_id, "‚ù§Ô∏è", reply_markup=markup)