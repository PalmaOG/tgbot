import logging
import mysql.connector
from mysql.connector import Error
from telebot import TeleBot, types

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏)
CONFIG = {
    'DB_HOST': 'localhost',
    'DB_NAME': 'BarbersMap',
    'DB_USER': 'root',
    'DB_PASS': 'root',
    'BOT_TOKEN': '7523785900:AAHuHFX6KkI-W0eSCDrnhliCWZBf8W4D5q8'
}

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        self.connection = None

    def __enter__(self):
        self.connect()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.disconnect()

    def connect(self):
        try:
            self.connection = mysql.connector.connect(
                host=CONFIG['DB_HOST'],
                database=CONFIG['DB_NAME'],
                user=CONFIG['DB_USER'],
                password=CONFIG['DB_PASS']
            )
            return True
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False

    def disconnect(self):
        if self.connection and self.connection.is_connected():
            self.connection.close()

    def execute(self, query, params=None, fetch_one=False):
        try:
            cursor = self.connection.cursor()
            cursor.execute(query, params or ())

            if query.strip().lower().startswith('select'):
                if fetch_one:
                    result = cursor.fetchone()
                    cursor.fetchall()
                else:
                    result = cursor.fetchall()
            else:
                self.connection.commit()
                result = True

            cursor.close()
            return result
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False

class GuidePhotoFiller:
    def __init__(self, bot_token):
        self.bot = TeleBot(bot_token)
        self.current_haircut_id = None

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.bot.message_handler(commands=['start', 'help'])(self.handle_start)
        self.bot.message_handler(commands=['set_haircut'])(self.handle_set_haircut)
        self.bot.message_handler(content_types=['photo'])(self.handle_photo)

    def handle_start(self, message):
        help_text = """
üìå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ID —Å—Ç—Ä–∏–∂–∫–∏: <code>/set_haircut ID</code>
   –ü—Ä–∏–º–µ—Ä: <code>/set_haircut 1</code>
2. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É
3. –§–æ—Ç–æ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ –±–∞–∑—É
"""
        self.bot.reply_to(message, help_text, parse_mode='HTML')

    def handle_set_haircut(self, message):
        try:
            _, haircut_id = message.text.split()
            self.current_haircut_id = int(haircut_id)

            with Database() as db:
                if db.connect():
                    result = db.execute(
                        "SELECT name FROM haircut_guide WHERE id = %s",
                        (self.current_haircut_id,),
                        fetch_one=True
                    )
                    if not result:
                        return self.bot.reply_to(message, "‚ùå –°—Ç—Ä–∏–∂–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                    name = result[0]

            self.bot.reply_to(
                message,
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID —Å—Ç—Ä–∏–∂–∫–∏: <b>{self.current_haircut_id}</b>\n"
                f"‚úÇÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É",
                parse_mode='HTML'
            )
        except (ValueError, IndexError):
            self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_haircut ID\n–ù–∞–ø—Ä–∏–º–µ—Ä: /set_haircut 1")

    def handle_photo(self, message):
        if not self.current_haircut_id:
            return self.bot.reply_to(
                message,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ID —Å—Ç—Ä–∏–∂–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /set_haircut ID"
            )

        file_id = message.photo[-1].file_id

        try:
            with Database() as db:
                if db.connect():
                    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è position
                    success = db.execute(
                        "INSERT INTO haircut_guide_photos (haircut_id, photo_url, is_primary) "
                        "VALUES (%s, %s, %s)",
                        (
                            self.current_haircut_id,
                            file_id,
                            1  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º
                        )
                    )

                    if success:
                        self.bot.reply_to(
                            message,
                            f"‚úÖ <b>–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n"
                            f"ID —Å—Ç—Ä–∏–∂–∫–∏: <code>{self.current_haircut_id}</code>",
                            parse_mode='HTML'
                        )
                    else:
                        self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")

    def start(self):
        logger.info("–ë–æ—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω...")
        self.bot.polling()

if __name__ == '__main__':
    if not CONFIG['BOT_TOKEN'] or CONFIG['BOT_TOKEN'] == '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê':
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ CONFIG!")
        exit(1)

    filler = GuidePhotoFiller(CONFIG['BOT_TOKEN'])
    filler.start()