import telebot
import logging
from telebot import types
from config.settings import Settings
from managers.database import DatabaseManager
from managers.barber import BarberManager, BarberStorage, QUESTION_ORDER
from managers.keyboard import KeyboardManager
from config.constants import SERVICES
from managers.admin import AdminManager
from managers.client import ClientManager, register_client_handlers
from managers.guide import GuideManager

logger = logging.getLogger(__name__)
bot = telebot.TeleBot(Settings.BOT_TOKEN)
storage = BarberStorage()

def show_main_menu(user_id, message_text=None):
    roles = DatabaseManager.get_all_roles(user_id)
    active_role = DatabaseManager.get_active_role(user_id)
    is_admin = DatabaseManager.is_admin(user_id)
    is_barber_filled = DatabaseManager.barber_exists(user_id) if active_role == 'barber' else False

    markup = KeyboardManager.main_menu(active_role, len(roles), is_admin, is_barber_filled, user_id=user_id)

    if message_text:
        bot.send_message(user_id, message_text, reply_markup=markup)
    else:
        role_name = {
            'client': '–∫–ª–∏–µ–Ω—Ç',
            'barber': '–±–∞—Ä–±–µ—Ä',
            'admin': '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        }.get(active_role, active_role)

        text = f"üëã –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: {role_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        bot.send_message(user_id, text, reply_markup=markup)

def register_handlers():
    @bot.message_handler(commands=['start'])
    def start(message):
        user = message.from_user
        user_id = user.id

        if not DatabaseManager.check_user(user_id):
            if not DatabaseManager.register_user(user_id, user.username, user.first_name):
                return bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

        roles = DatabaseManager.get_all_roles(user_id)
        active_role = DatabaseManager.get_active_role(user_id)

        if active_role == 'barber':
            barber = DatabaseManager.get_barber_by_user_id(user_id)
            if barber:
                status = DatabaseManager.get_barber_status(user_id)
                if status == "banned":
                    bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
                    return

        if not roles:
            bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
                             reply_markup=KeyboardManager.role_selection_keyboard())
        else:
            show_main_menu(user_id)

    @bot.message_handler(func=lambda msg: msg.text in ["üë§ –ö–ª–∏–µ–Ω—Ç", "‚úÇÔ∏è –ë–∞—Ä–±–µ—Ä"])
    def handle_role_selection(message):
        user_id = message.from_user.id
        role = 'client' if message.text == "üë§ –ö–ª–∏–µ–Ω—Ç" else 'barber'

        if DatabaseManager.save_user_role(user_id, role):
            show_main_menu(user_id, f"‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞: {'–∫–ª–∏–µ–Ω—Ç' if role == 'client' else '–±–∞—Ä–±–µ—Ä'}")
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏")

    @bot.message_handler(func=lambda msg: msg.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –±–∞—Ä–±–µ—Ä–∞")
    def start_barber_questionnaire(message):
        user_id = message.from_user.id

        barber = DatabaseManager.get_barber_by_user_id(user_id)
        if barber:
            status = DatabaseManager.get_barber_status(user_id)
            if status == "banned":
                bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
                return

        bot.send_message(user_id, "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –±–∞—Ä–±–µ—Ä–∞.",
                         reply_markup=KeyboardManager.barber_questionnaire_keyboard())
        BarberManager.ask_question(user_id, 'description', bot)

    @bot.message_handler(func=lambda msg: msg.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
    def edit_barber_questionnaire(message):
        user_id = message.from_user.id

        barber = DatabaseManager.get_barber_by_user_id(user_id)
        if barber:
            status = DatabaseManager.get_barber_status(user_id)
            if status == "banned":
                bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
                return

        DatabaseManager.delete_barber_data(user_id)
        storage.clear_profile(user_id)

        bot.send_message(user_id, "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.",
                         reply_markup=KeyboardManager.barber_questionnaire_keyboard())
        BarberManager.ask_question(user_id, 'description', bot)

    @bot.message_handler(func=lambda msg: msg.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    def save_barber_profile(message):
        user_id = message.from_user.id

        barber = DatabaseManager.get_barber_by_user_id(user_id)
        if barber:
            status = DatabaseManager.get_barber_status(user_id)
            if status == "banned":
                bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
                return

        BarberManager.save_profile_to_db(user_id, bot)

    @bot.message_handler(func=lambda msg: msg.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å", "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"])
    def handle_role_management(message):
        user_id = message.from_user.id

        barber = DatabaseManager.get_barber_by_user_id(user_id)
        if barber:
            status = DatabaseManager.get_barber_status(user_id)
            if status == "banned":
                bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
                return
        action = message.text

        roles = DatabaseManager.get_all_roles(user_id)
        active_role = DatabaseManager.get_active_role(user_id)
        is_admin = DatabaseManager.is_admin(user_id)

        if action == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å":
            available_roles = DatabaseManager.get_available_roles(user_id)
            if not available_roles:
                bot.send_message(user_id, "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏.")
                return

            markup = KeyboardManager.available_roles_keyboard(available_roles, is_admin)
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

        elif action == "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å":
            if len(roles) < 2:
                bot.send_message(user_id, "‚ùå –£ –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ä–æ–ª—å.")
                return

            markup = KeyboardManager.switch_role_keyboard(roles, active_role, is_admin)
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)

    @bot.message_handler(func=lambda msg: "–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å" in msg.text or "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è" in msg.text)
    def handle_role_action(message):
        user_id = message.from_user.id

        if "–∫–ª–∏–µ–Ω—Ç–∞" in message.text:
            role = 'client'
            action = 'add' if "–î–æ–±–∞–≤–∏—Ç—å" in message.text else 'switch'
        elif "–±–∞—Ä–±–µ—Ä–∞" in message.text:
            role = 'barber'
            action = 'add' if "–î–æ–±–∞–≤–∏—Ç—å" in message.text else 'switch'
        elif "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" in message.text:
            role = 'admin'
            action = 'switch'
        else:
            return

        if role == 'admin' and action == 'add':
            return

        if action == 'add':
            if DatabaseManager.save_user_role(user_id, role):
                show_main_menu(user_id, f"‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {role}")
            else:
                bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å")

        elif action == 'switch':
            if DatabaseManager.switch_active_role(user_id, role):
                show_main_menu(user_id, f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: {role}")
            else:
                bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–æ–ª—å")



    @bot.message_handler(func=lambda msg: msg.text in SERVICES.values())
    def handle_service_selection(message):
        user_id = message.from_user.id
        BarberManager.ask_for_service_price(user_id, bot, message.text)

    @bot.message_handler(func=lambda msg: msg.text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    def handle_service_continue(message):
        user_id = message.from_user.id
        idx = QUESTION_ORDER.index('services')
        next_key = QUESTION_ORDER[idx + 1]
        BarberManager.ask_question(user_id, next_key, bot)

    @bot.message_handler(func=lambda msg: msg.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
    def cancel_questionnaire(message):
        user_id = message.from_user.id
        storage.clear_profile(user_id)
        show_main_menu(user_id, "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")

    @bot.message_handler(func=lambda msg: msg.text == "‚ùå –û—Ç–º–µ–Ω–∞")
    def cancel_action(message):
        user_id = message.from_user.id
        show_main_menu(user_id)

    @bot.message_handler(func=lambda msg: msg.text == "üìç –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
    def choose_city(message):
        user_id = message.from_user.id
        cities = DatabaseManager.get_all_cities()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        for city in cities:
            markup.add(types.KeyboardButton(city))
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(user_id, save_city_selection)

    def save_city_selection(message):
        user_id = message.from_user.id
        city_name = message.text.strip()
        if city_name == "‚ùå –û—Ç–º–µ–Ω–∞":
            show_main_menu(user_id)
            return
        city_id = DatabaseManager.get_city_id_by_name(city_name)
        if not city_id:
            bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return choose_city(message)
        DatabaseManager.save_user_city_selection(user_id, city_id)
        bot.send_message(user_id, f"‚úÖ –ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω: {city_name}", reply_markup=KeyboardManager.main_menu("client", 1, False))
        show_main_menu(user_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
    def handle_admin_callbacks(call):
        AdminManager.handle_callback(bot, call)

    @bot.message_handler(func=lambda msg: msg.text == "üìù –ñ–¥—É—â–∏–µ –∞–Ω–∫–µ—Ç—ã")
    def handle_pending_profiles(message):
        user_id = message.from_user.id
        if not DatabaseManager.is_admin(user_id):
            return bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        AdminManager.show_pending_profiles(bot, user_id)

    @bot.message_handler(func=lambda msg: msg.text == "üìç –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
    def client_choose_city(message):
        user_id = message.from_user.id
        msg = bot.send_message(
            user_id,
            "üìç –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –±–∞—Ä–±–µ—Ä–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, handle_client_city_input)

    def handle_client_city_input(message):
        user_id = message.from_user.id
        city_name = message.text.strip()

        city_id = DatabaseManager.get_city_id_by_name(city_name)
        if not city_id:
            msg = bot.send_message(
                user_id,
                f"‚ùå –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            bot.register_next_step_handler(msg, handle_client_city_input)
            return

        DatabaseManager.save_user_city_selection(user_id, city_id)
        bot.send_message(
            user_id,
            f"‚úÖ –ì–æ—Ä–æ–¥ '{city_name}' –≤—ã–±—Ä–∞–Ω!",
            reply_markup=KeyboardManager.main_menu(
                "client",
                len(DatabaseManager.get_all_roles(user_id)),
                DatabaseManager.is_admin(user_id)
            )
        )

    @bot.message_handler(func=lambda msg: msg.text == "üîç –ù–∞–π—Ç–∏ –±–∞—Ä–±–µ—Ä–∞")
    def handle_find_barber(message):
        user_id = message.from_user.id
        city_id = DatabaseManager.get_user_city_selection(user_id)
        if not city_id:
            bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ 'üìç –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥'.")
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton("üîé –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"), types.KeyboardButton("üîé –§–∏–ª—å—Ç—Ä—ã"))
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –±–∞—Ä–±–µ—Ä–∞:", reply_markup=markup)

    @bot.message_handler(func=lambda msg: msg.text == "üîé –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    def handle_find_barber_no_filters(message):
        user_id = message.from_user.id
        city_id = DatabaseManager.get_user_city_selection(user_id)
        ClientManager.show_active_barbers(bot, user_id, page=0, city_id=city_id)

    @bot.message_handler(func=lambda msg: msg.text == "üîé –§–∏–ª—å—Ç—Ä—ã")
    def handle_find_barber_filters(message):
        user_id = message.from_user.id
        city_id = DatabaseManager.get_user_city_selection(user_id)

        has_metro = DatabaseManager.city_has_metro(city_id)

        if has_metro:
            msg = bot.send_message(
                user_id,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):",
                reply_markup=types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, handle_filter_metro)
        else:
            msg = bot.send_message(
                user_id,
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–¥–æ):",
                reply_markup=types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, handle_filter_price)

    def handle_filter_metro(message):
        user_id = message.from_user.id
        metro_input = message.text.strip().lower()

        storage = BarberStorage()
        profile = storage.get_profile(user_id) or {}

        if metro_input != '–Ω–µ—Ç':
            city_id = DatabaseManager.get_user_city_selection(user_id)
            metro_id = DatabaseManager.get_metro_id_by_name(city_id, metro_input)

            if not metro_id:
                msg = bot.send_message(
                    user_id,
                    f"‚ùå –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ '{metro_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç':"
                )
                bot.register_next_step_handler(msg, handle_filter_metro)
                return

            profile['filter_metro_id'] = metro_id
        else:
            profile['filter_metro_id'] = None

        storage.save_profile(user_id, profile)

        msg = bot.send_message(
            user_id,
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–¥–æ):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, handle_filter_price)

    def handle_filter_price(message):
        user_id = message.from_user.id
        try:
            max_price = int(message.text)
        except ValueError:
            msg = bot.send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞):"
            )
            bot.register_next_step_handler(msg, handle_filter_price)
            return

        storage = BarberStorage()
        profile = storage.get_profile(user_id) or {}
        profile['filter_max_price'] = max_price
        storage.save_profile(user_id, profile)

        text = (
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ü–∏—Ñ—Ä—É:\n"
            "1 ‚Äî –ë–æ—Ä–æ–¥–∞\n"
            "2 ‚Äî –î–ª–∏–Ω–Ω—ã–µ –≤–æ–ª–æ—Å—ã\n"
            "3 ‚Äî –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ª–æ—Å—ã\n"
            "4 ‚Äî –ë–æ—Ä–æ–¥–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ª–æ—Å—ã\n"
            "5 ‚Äî –ë–æ—Ä–æ–¥–∞ –∏ –¥–ª–∏–Ω–Ω—ã–µ –≤–æ–ª–æ—Å—ã\n"
            "6 ‚Äî –î–ª–∏–Ω–Ω—ã–µ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ª–æ—Å—ã\n"
            "7 ‚Äî –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        )
        msg = bot.send_message(user_id, text)
        bot.register_next_step_handler(msg, handle_filter_specialization)

    def handle_filter_specialization(message):
        user_id = message.from_user.id
        try:
            spec_num = int(message.text)
            if not 1 <= spec_num <= 7:
                raise ValueError
        except ValueError:
            msg = bot.send_message(
                user_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 7."
            )
            bot.register_next_step_handler(msg, handle_filter_specialization)
            return

        storage = BarberStorage()
        profile = storage.get_profile(user_id) or {}
        city_id = DatabaseManager.get_user_city_selection(user_id)

        max_price = profile.get('filter_max_price')
        metro_id = profile.get('filter_metro_id', None)

        barbers = DatabaseManager.get_filtered_barbers(
            city_id=city_id,
            max_price=max_price,
            specialization_num=spec_num,
            metro_id=metro_id
        )

        if not barbers:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ—Ç –±–∞—Ä–±–µ—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º."
            )
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(
                types.KeyboardButton("üîé –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"),
                types.KeyboardButton("üîé –§–∏–ª—å—Ç—Ä—ã")
            )
            markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            bot.send_message(
                user_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –±–∞—Ä–±–µ—Ä–∞:",
                reply_markup=markup
            )
            return

        markup = types.InlineKeyboardMarkup()
        for barber in barbers:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç—Ä–æ —Ç–µ–ø–µ—Ä—å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
            btn_text = f"{barber[9]} ({barber[3]})"
            markup.add(types.InlineKeyboardButton(
                btn_text,
                callback_data=f"client_showbarber_{barber[0]}"
            ))

        bot.send_message(
            user_id,
            "–ë–∞—Ä–±–µ—Ä—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º:",
            reply_markup=markup
        )

    @bot.message_handler(func=lambda msg: msg.text in ["üëÅÔ∏è –°–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—É", "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É"])
    def handle_toggle_visibility(message):
        user_id = message.from_user.id
        current_role = DatabaseManager.get_active_role(user_id)

        if current_role != 'barber' or not DatabaseManager.barber_exists(user_id):
            return

        current_status = DatabaseManager.get_barber_visibility_status(user_id)

        if current_status not in ['active', 'hidden']:
            return

        new_status = 'hidden' if current_status == 'active' else 'active'
        success = DatabaseManager.update_barber_status_by_user_id(user_id, new_status)

        if success:
            status_text = "—Å–∫—Ä—ã—Ç–∞" if new_status == 'hidden' else "–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
            bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Ç–µ–ø–µ—Ä—å {status_text}",
                reply_markup=KeyboardManager.main_menu(
                    active_role=current_role,
                    roles_count=len(DatabaseManager.get_all_roles(user_id)),
                    is_admin=DatabaseManager.is_admin(user_id),
                    is_barber_filled=True,
                    user_id=user_id
                )
            )
        else:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã")

    @staticmethod
    def update_barber_status_by_user_id(user_id, new_status):
        with Database() as db:
            if db.connect():
                return db.execute(
                    "UPDATE barbers SET status = %s WHERE user_id = %s",
                    (new_status, user_id)
                )
        return False

    @bot.message_handler(func=lambda msg: msg.text == "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
    def handle_my_profile(message):
        user_id = message.from_user.id
        BarberManager.show_my_profile(user_id, bot)

def start_bot():
    register_handlers()
    register_client_handlers(bot)
    GuideManager.init_handlers(bot)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)

if __name__ == "__main__":
    start_bot()